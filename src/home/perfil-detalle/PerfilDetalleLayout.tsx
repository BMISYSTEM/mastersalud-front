import { Link, useNavigate, useParams } from "react-router-dom";
import { flushSync } from "react-dom";
import { Helmet } from "react-helmet";
import  React, { useContext, useEffect, useState } from "react";
import { context } from "../Context/MastersaludContext";
import Modal from 'react-modal'
import { Calendario } from "./components/Calendario";
import 'animate.css'
import { clienteAxios } from "../../config/axios";
import fondo from './assets/fondo.webp'
import { Input } from "../../componentsGlobal/Input";
import { toast, ToastContainer } from "react-toastify";
import useSWR from "swr";
import { Comentariosinterface } from "./interfaces/comentariosInterface";
import { Star } from "../../componentsGlobal/Start";
import 'animate.css';
import formateadorData from "../../componentsGlobal/FormatData";

// Generated by https://quicktype.io

export interface Medicos {
  succes:   Succe[];
  motivos:  Motivo[];
  horarios: Horario[];
  calificacion:Calificacion[];
}
export interface Calificacion{
  total: number,
  suma: number,
  promedio: number
}
export interface Horario {
  id:          number;
  created_at:  Date;
  updated_at:  Date;
  hora_inicio: string;
  hora_fin:    string;
  lunes:       number;
  martes:      number;
  miercoles:   number;
  jueves:      number;
  viernes:     number;
  sabado:      number;
  domingo:     number;
  user:        number;
}

export interface Motivo {
  id:         number;
  nombre:     string;
  created_at: Date;
  updated_at: Date;
  user:       number;
}

export interface Succe {
  id:                number;
  name:              string;
  email:             string;
  email_verified_at: null;
  password:          string;
  remember_token:    null;
  created_at:        Date;
  updated_at:        Date;
  rol:               number;
  nombre:            null;
  apellido:          string;
  cedula:            string;
  fijo:              string;
  celular:           string;
  direccion:         string;
  cargo:             string;
  horarioatencion:   string;
  publico:           string;
  mediospago:        string;
  fotoperfil:        string;
  foto1:             string;
  foto2:             string;
  foto3:             null;
  foto4:             null;
  foto5:             null;
  foto6:             null;
  foto7:             null;
  foto8:             null;
  activo:            number;
  ciudad:           string;
  presencial:       number;
  virtual:          number;
}



export const PerfilDetalleLayout = () => {
  const token = localStorage.getItem('token');
  const baseUrl = import.meta.env.VITE_URL_API;
  const { vieTransitionName } = useContext(context);
  const {id} = useParams();
  const [formularioCompleto,setFormularioCompleto] = useState(false)
  const [infoMedico,setInfoMedico] = useState<Medicos>()
  //inputs de cita
  const [nombre,setNombre] = useState<string|number>('');
  const [telefono,setTelefono] = useState<string|number>('');
  const [email,setEmail] = useState<string|number>('');
  const [observacion,setObservacion] = useState<string|number>('');
  const [diaSelect,setDiaSelect] = useState<string>('')
  const [horaSelect,setHoraselect] = useState<number>()
  const [motivo,setMotivo] = useState<number>()
  const [primeravez,setPrimeravez] = useState<string>() 
  const [pedirCita,setPedirCita] = useState<boolean>(false)
  //comentarios 
  const [nombreComentario,setNombreComentario] = useState<number|string>('')
  const [emailComentario,setemailComentario] = useState<number|string>('')
  const [observacionComentario,setobservacionComentario] = useState<number|string>('')
  const [calificacioncomentario,setcalificacioncomentario] = useState<number|string>(0)
  // valor input 
  const navigate = useNavigate();
  const detalledoc = () => {
    // Verifica si startViewTransition está disponible
    if ("startViewTransition" in document) {
      document.startViewTransition(() => {
        // Utiliza flushSync para asegurar la sincronización antes de la navegación
        flushSync(() => {
          navigate("/");
        });
      });
    } else {
      // Si no está disponible, solo navega directamente
      navigate("/");
    }
  };
  const cerrarModal =() =>{
    setDiaSelect('')
    setHoraselect(0)
    setFormularioCompleto(false)
  }
  /**
   * Una vez se tenga seleccionado la fecha y la hora se pasa al formulario de datos para completar
  */
  const SeleccionHora = (hora:number) =>{
    setHoraselect(hora)
    if(diaSelect && hora){
      setFormularioCompleto(true)
    }
  }

  const fecha = new Date(diaSelect); // La fecha que quieras
  const diasSemana = ['D', 'L', 'Ma', 'M', 'J', 'V', 'S'];

  const dia = diasSemana[fecha.getDay()];
  let horas:Horario[] = infoMedico?.horarios ? infoMedico?.horarios : [];

  if (dia === 'D'){
    horas = horas.filter((h)=>h.domingo === 1);
  }
  if (dia === 'L'){
    horas = horas.filter((h)=>h.lunes === 1);
  }
  if (dia === 'Ma'){
    horas = horas.filter((h)=>h.martes === 1);
  }
  if (dia === 'M'){
    horas = horas.filter((h)=>h.miercoles === 1);
  }
  if (dia === 'J'){
    horas = horas.filter((h)=>h.jueves === 1);
  }
  if (dia === 'V'){
    horas = horas.filter((h)=>h.viernes === 1);
  }
  if (dia === 'S'){
    horas = horas.filter((h)=>h.sabado === 1);
  }
  if (dia === 'D'){
    horas = horas.filter((h)=>h.domingo === 1);
  }
  const consultar = async() =>
  {
    const datos =  {
      'id':id
    }
    if(id){
      const {data} = await  clienteAxios.post('/api/medic/find',datos)
      setInfoMedico(data);
    }
  }

  const handleComentario = async(e:React.FormEvent) =>{
    e.preventDefault()
    try {
      const datos = {
        nombre:nombreComentario,
        email:emailComentario,
        observacion:observacionComentario,
        calificacion:calificacioncomentario,
        user:id,

      }
      await toast.promise(clienteAxios.post('/api/comentario/create',datos),{
        error:'se genero un error al crear el comentario',
        pending:'guardando comentario',
        success:'Se guardo de forma correcta el comentario'
      })
      setNombreComentario('')
      setemailComentario('')
      setobservacionComentario('')
      setcalificacioncomentario(0)
      mutate()
    } catch (error) {
      console.log(error)
    }
  }

  const {data:allcomentarios,mutate} = useSWR('/api/comentario/all/medic?id='+id,()=>
  clienteAxios.get('api/comentario/all/medic?id='+id))
  const coment:Comentariosinterface = allcomentarios?.data;

  const handleCita = async(e: React.FormEvent) =>
  {
    e.preventDefault();
    const datos = {
      nombre:nombre,
      email:email,
      observacion:observacion,
      fecha_cita:diaSelect,
      horario:horaSelect,
      primera_visita:primeravez,
      motivo:motivo,
      telefono:telefono,
      user:id
    }
    await toast.promise(
    clienteAxios.post('/api/cita/create',datos,{
      headers:{
        Authorization:`Bearer ${token}`
      }
    })  
    ,{
      error:'Se genero un error al momento de crear la cita',
      pending:'Almacendo cita...',
      success:'Cita guardada con exito, revisa el correo la confirmacion de la cita'
    })
    setPedirCita(false)
  }


  useEffect(()=>{
    consultar()
  },[])

  return (
    <section className="w-full h-screen  flex flex-row justify-center overflow-hidden">
      <Helmet>
        <title>MasterSalud {infoMedico?.succes?.[0].name ? infoMedico?.succes?.[0].name :'medioc'  }</title>
      </Helmet>
      <section className="w-full h-full flex flex-row items-start  gap-2 overflow-screen relative">
        <section className="w-full flex flex-col gap-2 h-full  overflow-auto ">
          <Link to={'/'} className="px-2 text-sky-500 font-bold flex flex-row gap-2 mt-2">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="size-6">
              <path strokeLinecap="round" strokeLinejoin="round" d="M9 15 3 9m0 0 6-6M3 9h12a6 6 0 0 1 0 12h-3" />
            </svg>
            <p>Volver al Home</p>
          </Link>
          <div className="w-full flex flex-row gap-2 bg-white p-2">
            <button onClick={() => detalledoc()}>
            <img  src={`${baseUrl}/storage/${infoMedico?.succes?.[0].fotoperfil}`} alt="" 
                style={{ viewTransitionName: vieTransitionName }}
                className='object-contain w-64 h-64'
              />
            </button>
            <div className="w-full flex flex-col gap-2 bg-white">
              <p className="text-3xl font-bold">
                {infoMedico?.succes?.[0].name + ' '+ infoMedico?.succes?.[0].apellido }
              </p>
              <p>{infoMedico?.succes?.[0].cargo} </p>
              <p>{infoMedico?.succes?.[0].direccion }</p>
              <div className="w-full flex flex-row gap-1 items-center ">
                {/* estrellas */}
                <Star number={infoMedico?.calificacion?.[0].promedio ? infoMedico?.calificacion?.[0].promedio : 0}/>
                <p className="text-sm font-bold text-slate-500">
                  {infoMedico?.calificacion?.[0].total} Comentarios
                </p>
              </div>
              <button onClick={()=>setPedirCita(true)} className="p-2 text-white bg-blue-500 rounded-sm flex md:hidden">
                Agendar cita
              </button>
            </div>
          </div>
          {/* navar */}
          <nav className=" sticky top-0 m-0 w-full flex flex-row gap-2 justify-between border-t-2 border-b-2 p-2 bg-white">
            <a href="#informacion" className="text-center w-full">
              Informacion
            </a>
            <a href="#fotos" className="text-center w-full">
              Fotos
            </a>
            <a href="#comentarios" className="text-center w-full">
              Comentarios
            </a>
          </nav>
          {/* muestra la busqueda */}
          <section className="w-full flex flex-col gap-2 ">
            {/* informacion */}
            <div id="informacion" className="w-full flex flex-col bg-white gap-2 p-2 text-sm">
              <div className="w-full flex flex-row gap-2">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth={1.5}
                  stroke="currentColor"
                  className="size-6"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 0 1 2.25-2.25h13.5A2.25 2.25 0 0 1 21 7.5v11.25m-18 0A2.25 2.25 0 0 0 5.25 21h13.5A2.25 2.25 0 0 0 21 18.75m-18 0v-7.5A2.25 2.25 0 0 1 5.25 9h13.5A2.25 2.25 0 0 1 21 11.25v7.5m-9-6h.008v.008H12v-.008ZM12 15h.008v.008H12V15Zm0 2.25h.008v.008H12v-.008ZM9.75 15h.008v.008H9.75V15Zm0 2.25h.008v.008H9.75v-.008ZM7.5 15h.008v.008H7.5V15Zm0 2.25h.008v.008H7.5v-.008Zm6.75-4.5h.008v.008h-.008v-.008Zm0 2.25h.008v.008h-.008V15Zm0 2.25h.008v.008h-.008v-.008Zm2.25-4.5h.008v.008H16.5v-.008Zm0 2.25h.008v.008H16.5V15Z"
                  />
                </svg>
                <p>{infoMedico?.succes?.[0].horarioatencion }</p>
              </div>
              <div className="w-full flex flex-row gap-2">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth={1.5}
                  stroke="currentColor"
                  className="size-6"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M15.75 6a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0ZM4.501 20.118a7.5 7.5 0 0 1 14.998 0A17.933 17.933 0 0 1 12 21.75c-2.676 0-5.216-.584-7.499-1.632Z"
                  />
                </svg>
                <p>{infoMedico?.succes?.[0].publico }</p>
              </div>
              <div className="w-full flex flex-row gap-2">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth={1.5}
                  stroke="currentColor"
                  className="size-6"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M2.25 18.75a60.07 60.07 0 0 1 15.797 2.101c.727.198 1.453-.342 1.453-1.096V18.75M3.75 4.5v.75A.75.75 0 0 1 3 6h-.75m0 0v-.375c0-.621.504-1.125 1.125-1.125H20.25M2.25 6v9m18-10.5v.75c0 .414.336.75.75.75h.75m-1.5-1.5h.375c.621 0 1.125.504 1.125 1.125v9.75c0 .621-.504 1.125-1.125 1.125h-.375m1.5-1.5H21a.75.75 0 0 0-.75.75v.75m0 0H3.75m0 0h-.375a1.125 1.125 0 0 1-1.125-1.125V15m1.5 1.5v-.75A.75.75 0 0 0 3 15h-.75M15 10.5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm3 0h.008v.008H18V10.5Zm-12 0h.008v.008H6V10.5Z"
                  />
                </svg>

                <p>{infoMedico?.succes?.[0].mediospago }</p>
              </div>
              <div className="w-full flex flex-row gap-2">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth={1.5}
                  stroke="currentColor"
                  className="size-6"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M14.25 9.75v-4.5m0 4.5h4.5m-4.5 0 6-6m-3 18c-8.284 0-15-6.716-15-15V4.5A2.25 2.25 0 0 1 4.5 2.25h1.372c.516 0 .966.351 1.091.852l1.106 4.423c.11.44-.054.902-.417 1.173l-1.293.97a1.062 1.062 0 0 0-.38 1.21 12.035 12.035 0 0 0 7.143 7.143c.441.162.928-.004 1.21-.38l.97-1.293a1.125 1.125 0 0 1 1.173-.417l4.423 1.106c.5.125.852.575.852 1.091V19.5a2.25 2.25 0 0 1-2.25 2.25h-2.25Z"
                  />
                </svg>

                <p>+57 {infoMedico?.succes?.[0].celular }</p>
              </div>
              <div className="w-full flex flex-row gap-2">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth={1.5}
                  stroke="currentColor"
                  className="size-6"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M15 10.5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"
                  />
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M19.5 10.5c0 7.142-7.5 11.25-7.5 11.25S4.5 17.642 4.5 10.5a7.5 7.5 0 1 1 15 0Z"
                  />
                </svg>
                <p>{infoMedico?.succes?.[0].direccion }</p>
              </div>
              <div className="w-full flex flex-row gap-2">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth={1.5}
                  stroke="currentColor"
                  className="size-6"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M14.25 6.087c0-.355.186-.676.401-.959.221-.29.349-.634.349-1.003 0-1.036-1.007-1.875-2.25-1.875s-2.25.84-2.25 1.875c0 .369.128.713.349 1.003.215.283.401.604.401.959v0a.64.64 0 0 1-.657.643 48.39 48.39 0 0 1-4.163-.3c.186 1.613.293 3.25.315 4.907a.656.656 0 0 1-.658.663v0c-.355 0-.676-.186-.959-.401a1.647 1.647 0 0 0-1.003-.349c-1.036 0-1.875 1.007-1.875 2.25s.84 2.25 1.875 2.25c.369 0 .713-.128 1.003-.349.283-.215.604-.401.959-.401v0c.31 0 .555.26.532.57a48.039 48.039 0 0 1-.642 5.056c1.518.19 3.058.309 4.616.354a.64.64 0 0 0 .657-.643v0c0-.355-.186-.676-.401-.959a1.647 1.647 0 0 1-.349-1.003c0-1.035 1.008-1.875 2.25-1.875 1.243 0 2.25.84 2.25 1.875 0 .369-.128.713-.349 1.003-.215.283-.4.604-.4.959v0c0 .333.277.599.61.58a48.1 48.1 0 0 0 5.427-.63 48.05 48.05 0 0 0 .582-4.717.532.532 0 0 0-.533-.57v0c-.355 0-.676.186-.959.401-.29.221-.634.349-1.003.349-1.035 0-1.875-1.007-1.875-2.25s.84-2.25 1.875-2.25c.37 0 .713.128 1.003.349.283.215.604.401.96.401v0a.656.656 0 0 0 .658-.663 48.422 48.422 0 0 0-.37-5.36c-1.886.342-3.81.574-5.766.689a.578.578 0 0 1-.61-.58v0Z"
                  />
                </svg>

                <p>{infoMedico?.succes?.[0].cargo }</p>
              </div>
            </div>
            {/* fotos */}
            <div id="fotos" className="w-full flex flex-col gap-2 p-2  border-2 bg-white">
              <h2 className="text-2xl font-bold text-slate-600">Galeria</h2>
              <div className="w-full flex flex-wrap justify-center gap-2">
                <button>
                  <img
                    src={infoMedico?.succes?.[0].foto1 ?  `${baseUrl}/storage/${infoMedico?.succes?.[0].foto1}`: fondo}
                    alt=""
                    className="w-40 h-40 object-contain"
                  />
                </button>
                <button>
                  <img
                    src={infoMedico?.succes?.[0].foto2 ?  `${baseUrl}/storage/${infoMedico?.succes?.[0].foto2}`: fondo}
                    alt=""
                    className="w-40 h-40 object-contain"
                  />
                </button>
                <button>
                  <img
                    src={infoMedico?.succes?.[0].foto3 ?  `${baseUrl}/storage/${infoMedico?.succes?.[0].foto3}`: fondo}
                    alt=""
                    className="w-40 h-40 object-contain"
                  />
                </button>
                <button>
                  <img
                    src={infoMedico?.succes?.[0].foto4 ?  `${baseUrl}/storage/${infoMedico?.succes?.[0].foto4}`: fondo}
                    alt=""
                    className="w-40 h-40 object-contain"
                  />
                </button>
                <button>
                  <img
                    src={infoMedico?.succes?.[0].foto5 ?  `${baseUrl}/storage/${infoMedico?.succes?.[0].foto5}`: fondo}
                    alt=""
                    className="w-40 h-40 object-contain"
                  />
                </button>
                <button>
                  <img
                    src={infoMedico?.succes?.[0].foto6 ?  `${baseUrl}/storage/${infoMedico?.succes?.[0].foto6}`: fondo}
                    alt=""
                    className="w-40 h-40 object-contain"
                  />
                </button>
                <button>
                  <img
                    src={infoMedico?.succes?.[0].foto7 ?  `${baseUrl}/storage/${infoMedico?.succes?.[0].foto7}`: fondo}
                    alt=""
                    className="w-40 h-40 object-contain"
                  />
                </button>
                <button>
                  <img
                    src={infoMedico?.succes?.[0].foto8 ?  `${baseUrl}/storage/${infoMedico?.succes?.[0].foto8}`: fondo}
                    alt=""
                    className="w-40 h-40 object-contain"
                  />
                </button>
              </div>
            </div>
            {/* comentarios */}
            <div id="comentarios" className="w-full flex flex-col gap-2 p-2">
              <h3 className="text-2xl font-bold text-slate-500 ">Deja tu comentario</h3>
              <form onSubmit={handleComentario} action="" className="w-full h-full flex flex-col gap-2">
                <Input nombre="Nombre completo" setValue={setNombreComentario} valueInput={nombreComentario} type="text"/>
                <Input nombre="Email/Correo electronico" setValue={setemailComentario} valueInput={emailComentario} type="text"/>
                <Input nombre="Observacion" setValue={setobservacionComentario} valueInput={observacionComentario} type="text"/>
                <label htmlFor="" className="text-sm text-slate-400">Calificacion entre 1 y 5, 1 mas bajo y 5 la mas alta</label>
                <Input nombre="Calificacion" setValue={setcalificacioncomentario} valueInput={calificacioncomentario} type="number"/>
                <button type="submit" className="text-2xl font-bold text-white bg-blue-500 p-2 hover:bg-blue-600 transition-all">
                  Guardar comentario
                </button>
              </form>

              <div className="w-full flex flex-col gap-2">
                {/*comentarios*/}
                {coment?.succes.map((coment,index)=>(
                  <div key={index} className="border rounded-lg bg-slate-200 p-2">
                    <p className="text-sm text-slate-400">Comentario realizado el dia: {formateadorData(coment.created_at)}</p>
                    <p className="text-xl font-bold text-slate-600 uppercase">{coment.nombre}</p>
                    <Star number={coment.calificacion}/>
                    <p className="text-lg font-thin text-justify">{coment.observacion}</p>
                  </div>
                ))}
              </div>
            </div>
          </section>
        </section>
        {/* segunda columna dekttop */}
        <section className="hidden sticky mt-0 w-auto h-full md:flex flex-col gap-2 bg-white overflow-auto ">
          <div className="w-full h-10 bg-sky-800 p-1">
            <p className="text-xl font-bold text-white">Agendar cita</p>
          </div>
          <section className="w-full h-full flex flex-col gap-2 ">
            {/* opciones presencial o virtual */}
            <div className="w-full flex flex-row gap-4 p-2">
              <button className="border-b-2 border-slate-900 flex flex-row gap-2 items-center text-slate-700">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth={1.5}
                  stroke="currentColor"
                  className="size-6"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M2.25 21h19.5m-18-18v18m10.5-18v18m6-13.5V21M6.75 6.75h.75m-.75 3h.75m-.75 3h.75m3-6h.75m-.75 3h.75m-.75 3h.75M6.75 21v-3.375c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21M3 3h12m-.75 4.5H21m-3.75 3.75h.008v.008h-.008v-.008Zm0 3h.008v.008h-.008v-.008Zm0 3h.008v.008h-.008v-.008Z"
                  />
                </svg>
                <p>Presencial</p>
              </button>
              <button className="border-b-2 flex flex-row gap-2 items-center text-slate-700">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth={1.5}
                  stroke="currentColor"
                  className="size-6"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="m15.75 10.5 4.72-4.72a.75.75 0 0 1 1.28.53v11.38a.75.75 0 0 1-1.28.53l-4.72-4.72M4.5 18.75h9a2.25 2.25 0 0 0 2.25-2.25v-9a2.25 2.25 0 0 0-2.25-2.25h-9A2.25 2.25 0 0 0 2.25 7.5v9a2.25 2.25 0 0 0 2.25 2.25Z"
                  />
                </svg>
                <p>Virtual</p>
              </button>
            </div>
            {/* presencial */}
            <div className="w-full flex flex-row  text-sm">
              <form action="" className="w-full flex flex-col gap-4 p-1">
                <label htmlFor="" className="w-full flex flex-row gap-2">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    strokeWidth={1.5}
                    stroke="currentColor"
                    className="size-6"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="M15 10.5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"
                    />
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="M19.5 10.5c0 7.142-7.5 11.25-7.5 11.25S4.5 17.642 4.5 10.5a7.5 7.5 0 1 1 15 0Z"
                    />
                  </svg>
                  <p>Direccion</p>
                </label>
                <p className="text-sm border-2 p-1  text-justify">
                  {infoMedico?.succes?.[0].direccion}
                </p>
                <label htmlFor="" className="w-full flex flex-row gap-2 mt-2">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    strokeWidth={1.5}
                    stroke="currentColor"
                    className="size-6"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="M15.042 21.672 13.684 16.6m0 0-2.51 2.225.569-9.47 5.227 7.917-3.286-.672Zm-7.518-.267A8.25 8.25 0 1 1 20.25 10.5M8.288 14.212A5.25 5.25 0 1 1 17.25 10.5"
                    />
                  </svg>
                  <p className="text-sm">Elige el Motivo de la visita</p>
                </label>
                <select name="" id="" className="p-2 border-2 text-sm" onChange={(e)=>setMotivo(Number(e.target.value))}>
                <option  value={0}>Seleccione un motivo</option>
                  {infoMedico?.motivos.map((motivo,index)=>(
                    <option key={index} value={motivo.id}>{motivo.nombre}</option>

                  ))}
                </select>
                <label htmlFor="" className="w-full flex flex-row gap-2 mt-2 text-sm items-center">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    strokeWidth={1.5}
                    stroke="currentColor"
                    className="size-6"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="M15.75 6a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0ZM4.501 20.118a7.5 7.5 0 0 1 14.998 0A17.933 17.933 0 0 1 12 21.75c-2.676 0-5.216-.584-7.499-1.632Z"
                    />
                  </svg>

                  <p>¿Es tu primera visita con este especialista?</p>
                </label>
                <select name="" id="" className="p-2 border-2 text-sm" onChange={(e)=>setPrimeravez(e.target.value)}>
                  <option value="" selected>--seleccione una opcion</option>
                  <option value="si">Si</option>
                  <option value="no">NO</option>
                </select>
                {/* horas */}
                <section className="w-full flex flex-col gap-2 mt-2">
                  <div className="w-full flex flex-row gap-2 items-center text-sm">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="size-6">
                    <path strokeLinecap="round" strokeLinejoin="round" d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 0 1 2.25-2.25h13.5A2.25 2.25 0 0 1 21 7.5v11.25m-18 0A2.25 2.25 0 0 0 5.25 21h13.5A2.25 2.25 0 0 0 21 18.75m-18 0v-7.5A2.25 2.25 0 0 1 5.25 9h13.5A2.25 2.25 0 0 1 21 11.25v7.5m-9-6h.008v.008H12v-.008ZM12 15h.008v.008H12V15Zm0 2.25h.008v.008H12v-.008ZM9.75 15h.008v.008H9.75V15Zm0 2.25h.008v.008H9.75v-.008ZM7.5 15h.008v.008H7.5V15Zm0 2.25h.008v.008H7.5v-.008Zm6.75-4.5h.008v.008h-.008v-.008Zm0 2.25h.008v.008h-.008V15Zm0 2.25h.008v.008h-.008v-.008Zm2.25-4.5h.008v.008H16.5v-.008Zm0 2.25h.008v.008H16.5V15Z" />
                  </svg>
                  <p>Consulta Disponibilidad</p>
                  </div>
                  <Calendario diaselect={setDiaSelect} motivo={motivo ? motivo : 0} primera_visita={primeravez ? primeravez : null } />
                </section>
              </form>
            </div>
          </section>
        </section>
        {/* segunda columna mobile */}
        {pedirCita ?
          <section className="animate__animated animate__fadeInLeft absolute mt-0 w-full h-full md:flex flex-col gap-2 bg-white overflow-auto ">
            <div className="w-full h-16 bg-sky-800 p-1 flex flex-row justify-between items-center">
              <p className="text-xl font-bold text-white">Agendar cita</p>
              <button onClick={()=>setPedirCita(false)} className="text-white bg-red-500 p-2">
                Cancelar
              </button>
            </div>
            <section className="w-full h-full flex flex-col gap-2 ">
              {/* opciones presencial o virtual */}
              <div className="w-full flex flex-row gap-4 p-2">
                <button className="border-b-2 border-slate-900 flex flex-row gap-2 items-center text-slate-700">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    strokeWidth={1.5}
                    stroke="currentColor"
                    className="size-6"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="M2.25 21h19.5m-18-18v18m10.5-18v18m6-13.5V21M6.75 6.75h.75m-.75 3h.75m-.75 3h.75m3-6h.75m-.75 3h.75m-.75 3h.75M6.75 21v-3.375c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21M3 3h12m-.75 4.5H21m-3.75 3.75h.008v.008h-.008v-.008Zm0 3h.008v.008h-.008v-.008Zm0 3h.008v.008h-.008v-.008Z"
                    />
                  </svg>
                  <p>Presencial</p>
                </button>
                <button className="border-b-2 flex flex-row gap-2 items-center text-slate-700">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    strokeWidth={1.5}
                    stroke="currentColor"
                    className="size-6"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="m15.75 10.5 4.72-4.72a.75.75 0 0 1 1.28.53v11.38a.75.75 0 0 1-1.28.53l-4.72-4.72M4.5 18.75h9a2.25 2.25 0 0 0 2.25-2.25v-9a2.25 2.25 0 0 0-2.25-2.25h-9A2.25 2.25 0 0 0 2.25 7.5v9a2.25 2.25 0 0 0 2.25 2.25Z"
                    />
                  </svg>
                  <p>Virtual</p>
                </button>
              </div>
              {/* presencial */}
              <div className="w-full flex flex-row  text-sm">
                <form action="" className="w-full flex flex-col gap-4 p-1">
                  <label htmlFor="" className="w-full flex flex-row gap-2">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 24 24"
                      strokeWidth={1.5}
                      stroke="currentColor"
                      className="size-6"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        d="M15 10.5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"
                      />
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        d="M19.5 10.5c0 7.142-7.5 11.25-7.5 11.25S4.5 17.642 4.5 10.5a7.5 7.5 0 1 1 15 0Z"
                      />
                    </svg>
                    <p>Direccion</p>
                  </label>
                  <p className="text-sm border-2 p-1  text-justify">
                    {infoMedico?.succes?.[0].direccion}
                  </p>
                  <label htmlFor="" className="w-full flex flex-row gap-2 mt-2">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 24 24"
                      strokeWidth={1.5}
                      stroke="currentColor"
                      className="size-6"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        d="M15.042 21.672 13.684 16.6m0 0-2.51 2.225.569-9.47 5.227 7.917-3.286-.672Zm-7.518-.267A8.25 8.25 0 1 1 20.25 10.5M8.288 14.212A5.25 5.25 0 1 1 17.25 10.5"
                      />
                    </svg>
                    <p className="text-sm">Elige el Motivo de la visita</p>
                  </label>
                  <select name="" id="" className="p-2 border-2 text-sm" onChange={(e)=>setMotivo(Number(e.target.value))}>
                  <option  value={0}>Seleccione un motivo</option>
                    {infoMedico?.motivos.map((motivo,index)=>(
                      <option key={index} value={motivo.id}>{motivo.nombre}</option>

                    ))}
                  </select>
                  <label htmlFor="" className="w-full flex flex-row gap-2 mt-2 text-sm items-center">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 24 24"
                      strokeWidth={1.5}
                      stroke="currentColor"
                      className="size-6"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        d="M15.75 6a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0ZM4.501 20.118a7.5 7.5 0 0 1 14.998 0A17.933 17.933 0 0 1 12 21.75c-2.676 0-5.216-.584-7.499-1.632Z"
                      />
                    </svg>

                    <p>¿Es tu primera visita con este especialista?</p>
                  </label>
                  <select name="" id="" className="p-2 border-2 text-sm" onChange={(e)=>setPrimeravez(e.target.value)}>
                    <option value="" selected>--seleccione una opcion</option>
                    <option value="si">Si</option>
                    <option value="no">NO</option>
                  </select>
                  {/* horas */}
                  <section className="w-full flex flex-col gap-2 mt-2">
                    <div className="w-full flex flex-row gap-2 items-center text-sm">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="size-6">
                      <path strokeLinecap="round" strokeLinejoin="round" d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 0 1 2.25-2.25h13.5A2.25 2.25 0 0 1 21 7.5v11.25m-18 0A2.25 2.25 0 0 0 5.25 21h13.5A2.25 2.25 0 0 0 21 18.75m-18 0v-7.5A2.25 2.25 0 0 1 5.25 9h13.5A2.25 2.25 0 0 1 21 11.25v7.5m-9-6h.008v.008H12v-.008ZM12 15h.008v.008H12V15Zm0 2.25h.008v.008H12v-.008ZM9.75 15h.008v.008H9.75V15Zm0 2.25h.008v.008H9.75v-.008ZM7.5 15h.008v.008H7.5V15Zm0 2.25h.008v.008H7.5v-.008Zm6.75-4.5h.008v.008h-.008v-.008Zm0 2.25h.008v.008h-.008V15Zm0 2.25h.008v.008h-.008v-.008Zm2.25-4.5h.008v.008H16.5v-.008Zm0 2.25h.008v.008H16.5V15Z" />
                    </svg>
                    <p>Consulta Disponibilidad</p>
                    </div>
                    <Calendario diaselect={setDiaSelect} motivo={motivo ? motivo : 0} primera_visita={primeravez ? primeravez : null } />
                  </section>
                </form>
              </div>
            </section>
          </section>
        :

        null

        }
      </section>
      {/* seleccion de orario */}
      <Modal isOpen={diaSelect !== '' ? true : false} className={'w-full h-full backdrop-blur-sm flex items-center justify-center animate__animated animate__fadeIn'}>
        <section className="w-96 h-full bg-white border border-sky-500 p-2 flex flex-col gap-2 overflow-auto">
          {/* botton de cerar */}
          <div className="w-full flex flex-row justify-between">
            <p className="text-lg font-bold  text-slate-500">Disponibilidad Horaria</p>
            <button onClick={()=>cerrarModal()} className="text-xs p-2 rounded-full bg-red-500 w-6 h-6 flex justify-center items-center text-white hover:scale-105 transition-all text-center">X</button>
          </div>
          
          <p className="text-sm"><span className="font-bold">Fecha de la consulta: </span>{diaSelect}</p>
          {formularioCompleto === false ? 
            <div className=" flex flex-col gap-2 overflow-auto">
              {
              horas.length > 0 ?
                horas.map((horas,index)=>(
                  <button key={index} onClick={()=>SeleccionHora(horas.id)} className="w-full h-10 text-cl bg-slate-200 text-start p-2 flex flex-row hover:bg-sky-700 hover:text-white transition-all">
                    <p>{horas.hora_inicio +'-'+ horas.hora_fin}</p>
                  </button>
                ))
                :
                <p className="text-2xl font-bold text-red-200">No hay agenda para este dia</p>
              }
            </div>
          :
            <div className="animate__animated animate__fadeInRight mt-5">
              <form onSubmit={handleCita} action="" className="w-full h-full flex flex-col gap-2 overflow-auto ">
                  <label htmlFor="">Nombre del medico</label>
                  <label htmlFor="" className="text-lg text-slate-600">{infoMedico?.succes[0].direccion}</label>
                  <label htmlFor=""> <span className="font-bold">Hora de la consulta:</span> {horaSelect} </label>
                  <label htmlFor=""> <span className="font-bold">Motivo de consulta:</span> {horaSelect} </label>
                  <Input nombre="Nombre completo" setValue={setNombre} type="text" valueInput={nombre}/>
                  <Input nombre="Telefono de contacto" setValue={setTelefono} type="text" valueInput={telefono}/>
                  <Input nombre="Email" setValue={setEmail} type="email" valueInput={email}/>
                  <label htmlFor="" className="font-bold text-blue-400">Observacion</label>
                  <textarea name="" id="" className="border border-blue-400 p-2 text-lg" 
                  onChange={(e)=>setObservacion(e.target.value)}>
                  </textarea>
                  <input type="submit" className="text-white font-bold bg-sky-500 p-2 border-sm hover:bg-sky-800 transition-all cursor-pointer " value={'Registrar Cita'}/>
              </form>
            </div>
          }
        </section>
      </Modal>
      <ToastContainer/>
    </section>
  );
};
